(() => {
  // src/orca.ts
  var Orca = class {
    constructor() {
      this.defaultName_ = `orca-convert-${Math.round(Math.random() * 99)}`;
      this.inputTxt_ = document.querySelector("#txt");
      this.inputJSON_ = document.querySelector("#json");
      this.inputOrca_ = document.querySelector("#orca");
      this.downloadButtons_ = document.querySelectorAll(".button__download");
      this.attach_();
    }
    fromJSONtoStr() {
      const jsonStr = this.inputJSON_.innerText.trim();
      let str = "";
      if (jsonStr.length > 0) {
        const json = JSON.parse(jsonStr);
        for (let y in json[3]) {
          for (let x in json[3][y]) {
            str += json[3][y][x];
          }
          str += "\n";
        }
        this.inputTxt_.innerText = str.trim();
      }
      return str.trim();
    }
    fromLuatoStr() {
      const luaStr = this.inputOrca_.innerText.trim();
      const result = luaStr.replace(/return \{/g, "").replace(/\}$/g, "").replace(/\{/g, "[").replace(/\}/g, "]").replace(/\-\-.+/g, "").replace(/\[0\].+/g, "");
      const func = new Function(`"use strict"; return [${result}]`);
      const arr = func();
      let out = "";
      arr.forEach((line, index) => {
        if (index > 1) {
          Array.from(line).forEach((char) => {
            out += `${char}`;
          });
          out += `\r`;
        }
      });
      this.inputTxt_.innerText = out.trim();
      return this.inputTxt_.innerText;
    }
    fromTXTtoJSON() {
      const lines = this.inputTxt_.innerText.split("\n");
      let orcaArr = [];
      if (lines.length > 0) {
        let cell = [];
        for (let line of lines) {
          let chars = [];
          for (let i in Array.from(line)) {
            chars.push(line[i]);
          }
          cell.push(chars);
        }
        orcaArr = [
          this.defaultName_,
          lines[0].length - 1,
          lines.length - 1,
          cell
        ];
        this.inputJSON_.innerText = JSON.stringify(orcaArr, null, 2);
      }
      return JSON.stringify(orcaArr);
    }
    fromTXTtoLua() {
      const lines = this.inputTxt_.innerText.trim().split("\n");
      let out = `return {\r`;
      if (lines.length > 0) {
        out += `-- Table: {1}\r`;
        out += `{\r`;
        out += `  "${this.defaultName_}",\r`, out += `  ${lines[0].length - 1},\r`;
        out += `  ${lines.length - 1},\r`;
        out += `  {2},\r`;
        out += `},\r`;
        out += `-- Table: {2}\r`;
        out += `{\r`;
        let i = 3;
        for (i; i < 28; i++) {
          out += `  {${i}},\r`;
        }
        out += `  [0]={${i}},\r`;
        out += `},\r`;
        lines.forEach((line, index) => {
          out += `-- Table: {${index + 3}}\r`;
          out += `{\r`;
          for (let char of line) {
            out += `  "${char}",\r`;
          }
          out += `  [0]=".",\r`;
          out += `},\r`;
        });
      }
      out += `}`;
      this.inputOrca_.innerText = out.trim();
      return out.trim();
    }
    download_(filename, text) {
      const element = document.createElement("a");
      element.setAttribute("href", `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`);
      element.setAttribute("download", filename);
      element.style.display = "none";
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    }
    attach_() {
      this.inputTxt_.addEventListener("input", () => {
        this.fromTXTtoJSON();
        this.fromTXTtoLua();
      });
      this.inputJSON_.addEventListener("input", () => {
        this.fromJSONtoStr();
        this.fromTXTtoLua();
      });
      this.inputOrca_.addEventListener("input", () => {
        this.fromLuatoStr();
        this.fromTXTtoJSON();
      });
      Array.from(this.downloadButtons_).forEach((button) => {
        button.addEventListener("click", (event) => {
          const target = event.target;
          const extension = target.dataset.ext;
          const content = document.querySelector(`#${extension}`);
          if (content.innerText) {
            this.download_(`${this.defaultName_}.${extension}`, content.innerText);
          }
        });
      });
      window.addEventListener("paste", (event) => {
        var _a;
        event.preventDefault();
        const pasteEvent = event;
        const text = ((_a = pasteEvent.clipboardData) == null ? void 0 : _a.getData("text/plain")) || "";
        document.execCommand("insertHTML", false, text.trim());
      });
    }
  };

  // src/index.ts
  new Orca();
})();
